%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.3 (Build 17D47) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 1500 272
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 1500 272
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.1848 0.2032 0.23999999 sc
q
461.58969 139.35446 m
461.58969 124.11772 455.90277 114.11118 444.98297 109.33839 c
460.68149 49.756596 l
461.36264 47.022705 460.00034 45.664623 457.49567 45.664623 c
433.83258 45.664623 l
431.55853 45.664623 430.42325 46.799313 429.96561 48.848846 c
414.72119 106.60806 l
399.02267 106.60806 l
399.02267 49.299175 l
399.02267 47.022705 397.66037 45.664623 395.38275 45.664623 c
371.71967 45.664623 l
369.44559 45.664623 368.07974 47.029797 368.07974 49.299175 c
368.07974 223.95261 l
368.07974 226.22552 369.44559 227.5907 371.71967 227.5907 c
428.82681 227.5907 l
450.21225 227.5907 461.58969 216.21899 461.58969 194.84428 c
461.58969 139.35446 l
h
421.54694 136.62767 m
427.46094 136.62767 430.64676 139.81189 430.64676 145.7229 c
430.64676 188.47585 l
430.64676 194.38687 427.46094 197.56755 421.54694 197.56755 c
399.02267 197.56755 l
399.02267 136.62411 l
421.54694 136.62767 l
h
W
0 0 1500 272 rc
363.07974 232.5907 m
466.58969 232.5907 l
466.58969 40.664623 l
363.07974 40.664623 l
h
f
Q
q
479.77869 194.84428 m
479.77869 216.21899 491.15259 227.5907 512.54163 227.5907 c
538.02466 227.5907 l
559.4101 227.5907 570.78754 216.21899 570.78754 194.84428 c
570.78754 78.411034 l
570.78754 57.039879 559.4101 45.668171 538.02466 45.668171 c
512.54163 45.668171 l
491.15259 45.668171 479.77869 57.039879 479.77869 78.411034 c
479.77869 194.84428 l
h
532.33417 75.003426 m
538.24817 75.003426 541.43396 77.960709 541.43396 84.098663 c
541.43396 189.15666 l
541.43396 195.06769 538.24817 198.25191 532.33417 198.25191 c
519.14032 198.25191 l
513.22632 198.25191 510.04047 195.06769 510.04047 189.15666 c
510.04047 84.095116 l
510.04047 77.960709 513.22632 75.003426 519.14032 75.003426 c
532.33417 75.003426 l
h
W
0 0 1500 272 rc
474.77869 232.5907 m
575.78754 232.5907 l
575.78754 40.668171 l
474.77869 40.668171 l
h
f
Q
q
684.76056 170.28537 m
684.76056 168.0089 683.39471 166.64728 681.12421 166.64728 c
658.37286 166.64728 l
655.86823 166.64728 654.73291 168.0089 654.73291 170.28537 c
654.73291 188.47585 l
654.73291 194.38687 651.55066 197.56755 645.63666 197.56755 c
633.80511 197.56755 l
627.66406 197.56755 624.70532 194.38687 624.70532 188.47585 c
624.70532 84.772385 l
624.70532 78.63443 627.88757 75.684235 633.80511 75.684235 c
645.63666 75.684235 l
651.55066 75.684235 654.73291 78.63797 654.73291 84.772385 c
654.73291 102.96996 l
654.73291 105.24642 655.86823 106.60806 658.37286 106.60806 c
681.12421 106.60806 l
683.40533 106.60806 684.76056 105.24642 684.76056 102.96996 c
684.76056 78.407486 l
684.76056 57.036335 673.15607 45.664623 652.00122 45.664623 c
626.51819 45.664623 l
605.13269 45.664623 593.5282 57.036335 593.5282 78.407486 c
593.5282 194.84428 l
593.5282 216.21899 605.13269 227.5907 626.51819 227.5907 c
652.00122 227.5907 l
673.15961 227.5907 684.76056 216.21899 684.76056 194.84428 c
684.76056 170.28537 l
h
W
0 0 1500 272 rc
588.5282 232.5907 m
689.76056 232.5907 l
689.76056 40.664623 l
588.5282 40.664623 l
h
f
Q
q
780.76099 45.664623 m
778.02576 45.664623 776.43994 46.799313 775.5246 49.072239 c
746.86285 116.61459 l
738.44061 100.46655 l
738.44061 50.214016 l
738.44061 47.256737 736.85126 45.664623 733.89252 45.664623 c
712.04938 45.664623 l
709.09064 45.664623 707.49768 47.256737 707.49768 50.214016 c
707.49768 223.04131 l
707.49768 225.99504 709.09064 227.5907 712.04938 227.5907 c
733.89252 227.5907 l
736.84772 227.5907 738.44061 225.9986 738.44061 223.04131 c
738.44061 152.54521 l
773.4776 224.17953 l
774.61639 226.45247 776.21289 227.5907 778.71399 227.5907 c
802.60059 227.5907 l
806.01343 227.5907 807.37933 225.31422 805.78284 222.13356 c
767.1095 142.76917 l
808.284 50.894833 l
809.87689 47.93755 808.51105 45.664623 804.87463 45.664623 c
780.76099 45.664623 l
h
W
0 0 1500 272 rc
702.49768 232.5907 m
813.94122 232.5907 l
813.94122 40.664623 l
702.49768 40.664623 l
h
f
Q
q
915.67249 201.20918 m
915.67249 198.93626 914.76074 197.34415 912.03253 197.34415 c
855.15247 197.34415 l
855.15247 151.86441 l
898.60809 151.86441 l
900.88928 151.86441 902.24805 150.49924 902.24805 147.99937 c
902.24805 125.48643 l
902.24805 122.98303 900.8822 121.61786 898.60809 121.61786 c
855.15247 121.61786 l
855.15247 75.684235 l
912.03253 75.684235 l
914.76782 75.684235 915.67249 74.545998 915.67249 72.046143 c
915.67249 49.302719 l
915.67249 47.029797 914.76074 45.671719 912.03253 45.671719 c
828.30713 45.671719 l
826.25653 45.671719 824.89069 47.036888 824.89069 49.302719 c
824.89069 223.95261 l
824.89069 226.22552 826.25653 227.5907 828.30713 227.5907 c
912.03253 227.5907 l
914.76782 227.5907 915.67249 226.22552 915.67249 223.95261 c
915.67249 201.20918 l
h
W
0 0 1500 272 rc
819.89069 232.5907 m
920.67249 232.5907 l
920.67249 40.671719 l
819.89069 40.671719 l
h
f
Q
q
1021.2304 227.5907 m
1023.7315 227.5907 1024.8704 226.22552 1024.8704 223.95261 c
1024.8704 201.20918 l
1024.8704 198.93626 1023.7315 197.57109 1021.2304 197.57109 c
994.83917 197.57109 l
994.83917 49.302719 l
994.83917 46.80286 993.70392 45.671719 991.20276 45.671719 c
967.53967 45.671719 l
965.25854 45.671719 963.89978 46.80286 963.89978 49.302719 c
963.89978 197.57109 l
937.51208 197.57109 l
935.2309 197.57109 933.87213 198.93626 933.87213 201.20918 c
933.87213 223.95261 l
933.87213 226.22552 935.23798 227.5907 937.51208 227.5907 c
1021.2304 227.5907 l
h
W
0 0 1500 272 rc
928.87213 232.5907 m
1029.8704 232.5907 l
1029.8704 40.671719 l
928.87213 40.671719 l
h
f
Q
q
1022.6113 71.092369 m
1022.6113 74.049652 1024.2042 75.638222 1027.1631 75.638222 c
1047.8673 75.638222 l
1050.8262 75.638222 1052.4155 74.049652 1052.4155 71.092369 c
1052.4155 50.175091 l
1052.4155 47.214264 1050.8262 45.625698 1047.8673 45.625698 c
1027.1631 45.625698 l
1024.2042 45.625698 1022.6113 47.214264 1022.6113 50.175091 c
1022.6113 71.092369 l
h
W
0 0 1500 272 rc
1017.6113 80.638222 m
1057.4155 80.638222 l
1057.4155 40.625698 l
1017.6113 40.625698 l
h
f
Q
q
1166.3663 170.28537 m
1166.3663 168.0089 1164.9969 166.64728 1162.7264 166.64728 c
1139.9751 166.64728 l
1137.474 166.64728 1136.3387 168.0089 1136.3387 170.28537 c
1136.3387 188.47585 l
1136.3387 194.38687 1133.1564 197.56755 1127.2424 197.56755 c
1115.4109 197.56755 l
1109.2662 197.56755 1106.311 194.38687 1106.311 188.47585 c
1106.311 84.772385 l
1106.311 78.63443 1109.4933 75.684235 1115.4109 75.684235 c
1127.2424 75.684235 l
1133.1564 75.684235 1136.3387 78.63797 1136.3387 84.772385 c
1136.3387 102.96996 l
1136.3387 105.24642 1137.474 106.60806 1139.9751 106.60806 c
1162.7264 106.60806 l
1165.0076 106.60806 1166.3663 105.24642 1166.3663 102.96996 c
1166.3663 78.407486 l
1166.3663 57.036335 1154.7618 45.664623 1133.6034 45.664623 c
1108.1204 45.664623 l
1086.7349 45.664623 1075.1304 57.036335 1075.1304 78.407486 c
1075.1304 194.84428 l
1075.1304 216.21899 1086.7349 227.5907 1108.1204 227.5907 c
1133.6034 227.5907 l
1154.7654 227.5907 1166.3663 216.21899 1166.3663 194.84428 c
1166.3663 170.28537 l
h
W
0 0 1500 272 rc
1070.1304 232.5907 m
1171.3663 232.5907 l
1171.3663 40.664623 l
1070.1304 40.664623 l
h
f
Q
q
1249.1729 223.95261 m
1249.1729 226.22552 1250.5353 227.5907 1252.8093 227.5907 c
1276.2418 227.5907 l
1278.9735 227.5907 1280.1052 226.22552 1280.1052 223.95261 c
1280.1052 49.302719 l
1280.1052 47.029797 1278.97 45.671719 1276.2418 45.671719 c
1252.8093 45.671719 l
1250.5281 45.671719 1249.1729 47.036888 1249.1729 49.302719 c
1249.1729 121.61786 l
1220.0499 121.61786 l
1220.0499 49.299175 l
1220.0499 47.022705 1218.6841 45.664623 1216.41 45.664623 c
1192.9811 45.664623 l
1190.2458 45.664623 1189.1106 47.029797 1189.1106 49.299175 c
1189.1106 223.95261 l
1189.1106 226.22552 1190.2458 227.5907 1192.9811 227.5907 c
1216.41 227.5907 l
1218.6912 227.5907 1220.0499 226.22552 1220.0499 223.95261 c
1220.0499 151.63747 l
1249.1729 151.63747 l
1249.1729 223.95261 l
h
W
0 0 1500 272 rc
1184.1106 232.5907 m
1285.1052 232.5907 l
1285.1052 40.664623 l
1184.1106 40.664623 l
h
f
Q
q
1383.8573 45.664623 m
1381.8103 45.664623 1380.675 46.799313 1380.2174 48.848846 c
1373.8494 82.045586 l
1333.3489 82.045586 l
1327.2114 48.848846 l
1326.7538 46.799313 1325.6185 45.664623 1323.5715 45.664623 c
1299.2308 45.664623 l
1296.7296 45.664623 1295.5908 47.029797 1296.2684 49.529659 c
1334.0371 224.40648 l
1334.4948 226.6794 1335.8572 227.5907 1337.9042 227.5907 c
1369.5317 227.5907 l
1371.5787 227.5907 1372.9447 226.6794 1373.3988 224.40648 c
1411.1675 49.529659 l
1411.6251 47.029797 1410.7134 45.664623 1407.9851 45.664623 c
1383.8573 45.664623 l
h
1353.5956 187.79504 m
1339.0359 108.43065 l
1368.1588 108.43065 l
1353.5956 187.79504 l
h
W
0 0 1500 272 rc
1291.0758 232.5907 m
1416.2802 232.5907 l
1416.2802 40.664623 l
1291.0758 40.664623 l
h
f
Q
q
1496.241 227.5907 m
1498.7421 227.5907 1499.881 226.22552 1499.881 223.95261 c
1499.881 201.20918 l
1499.881 198.93626 1498.7421 197.57109 1496.241 197.57109 c
1469.8533 197.57109 l
1469.8533 49.302719 l
1469.8533 46.80286 1468.7145 45.671719 1466.2134 45.671719 c
1442.5503 45.671719 l
1440.2762 45.671719 1438.9139 46.80286 1438.9139 49.302719 c
1438.9139 197.57109 l
1412.5262 197.57109 l
1410.2485 197.57109 1408.8898 198.93626 1408.8898 201.20918 c
1408.8898 223.95261 l
1408.8898 226.22552 1410.2557 227.5907 1412.5262 227.5907 c
1496.241 227.5907 l
h
W
0 0 1500 272 rc
1403.8898 232.5907 m
1504.881 232.5907 l
1504.881 40.671719 l
1403.8898 40.671719 l
h
f
Q
0.86000001 0.1376 0.1376 sc
q
270.49542 166.6837 m
270.49942 166.67746 l
270.49875 166.6785 270.49811 166.67953 270.49744 166.68057 c
270.49677 166.68163 270.49609 166.68266 270.49542 166.6837 c
h
92.931229 260.53345 m
102.43934 255.25266 111.42692 248.57127 119.1024 241.14505 c
131.47496 243.38597 144.23251 244.51598 157.17488 244.51598 c
195.91881 244.51598 232.65147 234.35226 260.59982 215.90288 c
275.073 206.34396 286.57697 195.00249 294.78839 182.19041 c
303.93304 167.91411 308.56851 152.5619 308.56851 136.11151 c
308.56851 120.10359 303.93304 104.74502 294.78839 90.471893 c
286.57697 77.65345 275.073 66.315163 260.59982 56.756245 c
232.65147 38.306858 195.92189 28.149511 157.17488 28.149511 c
144.23251 28.149511 131.47804 29.27952 119.1024 31.517256 c
111.42384 24.094212 102.43934 17.409653 92.931229 12.12885 c
42.128906 -13.313857 0 11.530423 0 11.530423 c
0 11.530423 39.16898 44.784515 32.799438 73.935562 c
15.273961 91.897926 5.7781711 113.56227 5.7781711 136.54761 c
5.7781711 159.10004 15.277041 180.76437 32.799438 198.72992 c
39.167923 227.87296 0.012970407 261.12088 0.00000322 261.13187 c
0.012531536 261.13928 42.136459 285.97556 92.931229 260.53345 c
h
W
0 0 1500 272 rc
-5 277 m
313.56851 277 l
313.56851 -4.3362803 l
-5 -4.3362803 l
h
f
Q
1 1 1 sc
q
62.545422 85.96032 m
45.133476 99.68203 34.682079 117.24117 34.682079 136.37949 c
34.682079 180.29559 89.714066 215.89664 157.59946 215.89664 c
225.48485 215.89664 280.51685 180.29559 280.51685 136.37949 c
280.51685 92.463364 225.48485 56.862324 157.59946 56.862324 c
140.86847 56.862324 124.91824 59.024807 110.38017 62.941292 c
99.751434 52.690693 l
93.976204 47.120926 87.207169 42.080551 80.151428 38.108696 c
70.799126 33.515865 61.5639 31.010078 52.42691 30.245495 c
52.942345 31.182579 53.416965 32.131863 53.926483 33.070419 c
64.576447 52.688248 67.449425 70.318214 62.545422 85.96032 c
h
W*
0 0 1500 272 rc
29.682081 220.89664 m
285.51685 220.89664 l
285.51685 25.245495 l
29.682081 25.245495 l
h
f
Q
0.86000001 0.1376 0.1376 sc
q
98.65554 117.46072 m
88.675369 117.46072 80.584839 125.68127 80.584839 135.82182 c
80.584839 145.96239 88.675369 154.18294 98.65554 154.18294 c
108.63572 154.18294 116.72625 145.96239 116.72625 135.82182 c
116.72625 125.68127 108.63572 117.46072 98.65554 117.46072 c
h
156.83441 117.46072 m
146.85423 117.46072 138.7637 125.68127 138.7637 135.82182 c
138.7637 145.96239 146.85423 154.18294 156.83441 154.18294 c
166.81459 154.18294 174.90512 145.96239 174.90512 135.82182 c
174.90512 125.68127 166.81459 117.46072 156.83441 117.46072 c
h
215.01328 117.46072 m
205.0331 117.46072 196.94257 125.68127 196.94257 135.82182 c
196.94257 145.96239 205.0331 154.18294 215.01328 154.18294 c
224.99345 154.18294 233.08398 145.96239 233.08398 135.82182 c
233.08398 125.68127 224.99345 117.46072 215.01328 117.46072 c
h
W
0 0 1500 272 rc
75.584839 159.18294 m
238.08398 159.18294 l
238.08398 112.46072 l
75.584839 112.46072 l
h
f
ep
end
%%Trailer
%%EOF
